#!/usr/bin/env python3

from z3 import BitVec, Solver

a = [BitVec(f'a{i}', 8) for i in range(32)]
s = Solver()

s.add(a[0x1d] == a[5] - a[3] + 0x46)
s.add(a[2] + a[0x16] == a[0xd] + 0x7b)
s.add(a[0xc] + a[4] == a[5] + 0x1c)
s.add(a[0x19] * a[0x17] == a[0] + a[0x11] + 0x17)
s.add(a[0x1b] * a[1] == a[5] + a[0x16] - 0x15)
s.add(a[9] * a[0xd] == a[0x1c] * a[3] - 9)
s.add(a[9] == 0x70)
s.add(a[0x13] + a[0x15] == a[6] - 0x80)
s.add(a[0x10] == a[0xf] - a[0xb] + 0x30)
s.add(a[7] * a[0x1b] == a[1] * a[0xd] + 0x2d)
s.add(a[0xd] == a[0x12] + a[0xd] - 0x65)
s.add(a[0x14] - a[8] == a[9] + 0x7c)
s.add(a[0x1f] == a[8] - a[0x1f] - 0x79)
s.add(a[0x14] * a[0x1f] == a[0x14] + 0x04)
s.add(a[0x18] - a[0x11] == a[0x15] + a[8] - 0x17)
s.add(a[7] + a[5] == a[5] + a[0x1d] + 0x2c)
s.add(a[0xc] * a[10] == a[1] - a[0xb] - 0x24)
s.add(a[0x1f] * a[0] == a[0x1a] - 0x1b)
s.add(a[1] + a[0x14] == a[10] - 0x7d)
s.add(a[0x12] == a[0x1b] + a[0xe] + 0x02)
s.add(a[0x1e] * a[0xb] == a[0x15] + 0x44)
s.add(a[5] * a[0x13] == a[1] - 0x2c)
s.add(a[0xd] - a[0x1a] == a[0x15] - 0x7f)
s.add(a[0x17] == a[0x1d] - a[0] + 0x58)
s.add(a[0x13] == a[8] * a[0xd] - 0x17)
s.add(a[6] + a[0x16] == a[3] + 0x53)
s.add(a[0xc] == a[0x1a] + a[7] - 0x72)
s.add(a[0x10] == a[0x12] - a[5] + 0x33)
s.add(a[0x1e] - a[8] == a[0x1d] - 0x4d)
s.add(a[0x14] - a[0xb] == a[3] - 0x4c)
s.add(a[0x10] - a[7] == a[0x11] + 0x66)
s.add(a[1] + a[0x15] == a[0xb] + a[0x12] + 0x2b)

s.check()
model = s.model()

flag = ''.join(chr(model[i].as_long()) for i in a)
print(flag)
